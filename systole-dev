#!/usr/bin/env bash

SYSTOLE_DEV_CONFIG="$HOME/.config/guix-dev-scripts/systole-dev.cfg"
BASEDIR="$(dirname "$0")"

if [ -f "$SYSTOLE_DEV_CONFIG" ]; then
    source "$SYSTOLE_DEV_CONFIG"
fi

function usage() {
    echo -n "Usage: systole-dev [COMMAND] [OPTION] args...

The centralised development tool for Systole. Each command has its own set of
options. Use its '--help' command for more information.

Commands:
    build               build a package in the systole channel
    edit-config              edit the configuration file
    help                this page
    generate-config     generate the configuration file
    shell               create a shell to build Systole packages

Example:
    systole-dev help
"
}

function usage-build() {
    echo -n "Usage: systole-dev build package-name [--default-options|OPTIONS]

Build a package in the guix-systole channel.

To see the OPTIONS, refer to the command 'guix build --help'. This command comes
with the flag '--default-options', which executes the following flags for guix
build: '--keep-failed --keep-going --no-grafts --rounds=1 --verbosity=3'.

Commands:
    help                this page

Example:
    # Build package slicer with no build options:
    systole-dev build slicer

    # Build package slicer with default build options
    systole-dev build slicer --default-options

    # Build package slicer with custom build options
    systole-dev build slicer --keep-failed --rounds=2
"
}

function usage-shell() {
    echo -n "Usage: systole-dev shell package-name

Open a shell with the environments for the given package.

Commands:
    help                this page

Available package-name:
    slicer-5.8
"
}

function build() {
    if [ -z "$1" ] || [ "$1" == "help" ]; then
        usage-build
        return 0
    fi

    package="$1"
    shift

    if [ "$1" == "--default-options" ]; then
        args='--keep-failed --keep-going --no-grafts --rounds=1 --verbosity=3'
    else
        args="$@"
    fi

    guix_command=""
    if [[ "$USE_SYSTEM_GUIX" -eq 1 ]]; then
        guix_command="/usr/bin/guix"
    else
        guix_command="guix"
    fi

    command -v "$guix_command" > /dev/null || { echo "Guix not found" && return 1; }

    rm -rf /tmp/guix-build-* && time "$guix_command" build -L . "$package" $args
}

function generate-config() {
    if [ "$1" == "help" ]; then
        echo "This command does not have a help page."
        return 0
    fi

    if [ ! -f "$BASEDIR/systole-dev.template" ]; then
        echo "Failed to find the config template"
        return 1
    fi

    if [ -f "$SYSTOLE_DEV_CONFIG" ]; then
        echo "The config file already exists"
        return 1
    fi

    mkdir -p "$(dirname "$SYSTOLE_DEV_CONFIG")"
    cp "$BASEDIR/systole-dev.template" "$SYSTOLE_DEV_CONFIG"
}

function edit-config() {
    editor="nano"
    if [ ! -z "$EDITOR" ]; then
        editor="$EDITOR"
    fi

    command -v "$EDITOR" > /dev/null || { 
        echo "Editor not found. Set environment variable EDITOR before using this command."
        return 1; 
    }

    "$editor" "$SYSTOLE_DEV_CONFIG"
}

function shell() {
    case "$1" in
    'slicer-5.8' )
        if [ -z "$GUIX_SYSTOLE_DIR" ]; then
echo "Missing variable 'GUIX_SYSTOLE_DIR' in $HOME/.config/guix-systole-dev. Add
this variable to the configuration file and specify where in the file system the
project is.

Use command 'systole-dev edit-config' to edit the file."
            exit 1
        elif [ ! -d "$GUIX_SYSTOLE_DIR" ]; then
echo "Systole project identified as '$GUIX_SYSTOLE_DIR', but this directory does
not exist."
            exit 1
        fi

        guix shell -L "$GUIX_SYSTOLE_DIR" -C cmake --share=/gnu=/gnu -D libxt eigen expat openssl@3.0 git glibc hdf5@1.10 libffi libice libx11 libjpeg-turbo libxinerama mesa perl python python-sphinx rapidjson tbb zlib qtbase@5 qtmultimedia@5 qtxmlpatterns qtdeclarative@5 qtsvg@5 qtx11extras qtwebengine@5 qtwebchannel@5 qttools@5 vtk-slicer double-conversion freetype gl2ps glew jsoncpp libharu libtheora libxml++ lz4 mpich netcdf proj ctk ctkapplauncher itk-slicer libarchive-slicer teem-slicer qrestapi || exit 1
        ;;
    * )
        usage-shell ;;
    esac
}

# Parse COMMAND
case "$1" in
help )
    usage ;;
build )
    shift; build "$@" ;;
edit-config )
    edit-config ;;
generate-config )
    generate-config ;;
shell )
    shift; shell "$@";;
* )
    echo "systole-dev: Unrecognized command $1. Use 'help' for commands"
    exit 1
esac
